public String findRelationsByUser(final String name) throws URISyntaxException{
			return executeTransaction(new Transaction<String>(){
				public String execute(Connection conn) throws SQLException{
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				String result = null;
				
				try {

					stmt = conn.prepareStatement(
							"select relations.business_name " +
							"  from relations " +
							" where relations.username = ? AND relations.own? = true "
							);
					stmt.setString(1, name);
					resultSet = stmt.executeQuery();
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						// create new User object
						// retrieve attributes from resultSet starting with index 1
						result = resultSet.getString(0);
					}
					
					// check if the title was found
					if (!found) {
						System.out.println("<" + name + "> owns no businesses");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}







package servlets;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import controllers.BusinessController;
import controllers.EventController;
import model.Business;
import model.User;


//Quarantine for errors

@WebServlet("/newEventServlet")
public class NewEventServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;
	EventController controller = new EventController();
    BusinessController bus_control = new BusinessController();


	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
		throws ServletException, IOException {
		req.getRequestDispatcher("editEvent.jsp").forward(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
		throws ServletException, IOException {
	
		/*if(req.getParameter("Username") != null){
		resp.sendRedirect(req.getContextPath() + "/UserHome");
		}*/
		
		// Decode form parameters and dispatch to controller
        String errorMessage = null;
        Double result = null;
        try {
          String name = req.getParameter("Name");
          String description = req.getParameter("Description");
          String start1 = req.getParameter("Start");
          String end1 = req.getParameter("End");
          String time1 = req.getParameter("Time");
          String businessName = null;
          //req.getParameter("Business");	//May not work
          String location = req.getParameter("Location");
          
          String array[]=start1.split("-");
          int time= (Integer.parseInt(array[0])-2000) + (Integer.parseInt(array[2])*100) +(Integer.parseInt(array[0])*10000);
          String array1[]=start1.split(":");
          int start= (Integer.parseInt(array[2])) + (Integer.parseInt(array[1])*100) +(Integer.parseInt(array[0])*10000);
          String array2[]=start1.split(":");
          int end= (Integer.parseInt(array[2])) + (Integer.parseInt(array[1])*100) +(Integer.parseInt(array[0])*10000);
         
          
          
          
          if(req.getSession().getAttribute("user") != null && req.getSession().getAttribute("user") != ""){
    			String user = (String) req.getSession().getAttribute("user");
    			businessName = bus_control.findBusinessByUser(user);
    		  }
            else{
            	req.getSession().setAttribute("user", null);
            	errorMessage = "Session terminated, please log in again.";
            	req.setAttribute("errorMessage", errorMessage);
            	req.getRequestDispatcher("login.jsp").forward(req, resp);
            }//end session data check


          if (name == null || location == null || start < 1010001 || end < 1010001) { // (01-01-0001) the first day.
            errorMessage = "Please fill in the event's name, start date, and end date.";
            
            //save info
            req.setAttribute("Event name", name);
            req.setAttribute("Event details", description);
            req.setAttribute("Start date", start);
            req.setAttribute("End date", end);
            req.setAttribute("Business", businessName);
            req.setAttribute("Location", location);
            req.setAttribute("errorMessage", errorMessage);
            
            //reload
            req.getRequestDispatcher("editEvent.jsp").forward(req, resp);
          }
          
          else { //fields filled
            EventController controller = new EventController();
            if(controller.AddEvent(name, description, start, end, time, businessName, location)){
            	//set new attributes to display
            	req.setAttribute("Event name", name);
                req.setAttribute("Event details", description);
                req.setAttribute("Start date", start);
                req.setAttribute("End date", end);
                req.setAttribute("Business", businessName);
                req.setAttribute("Location", location);
                req.setAttribute("errorMessage", errorMessage);
                            
            	//display the event
            	req.getRequestDispatcher("index.jsp").forward(req, resp); //TODO Change to event.jsp
            
            }//end saves properly
            else{
            	//TODO: goto catch
            	errorMessage = "Something fucked up."; 				//TODO recheck this
                //set new attributes to display
                req.setAttribute("errorMessage", errorMessage);
                
                //display the event
                req.getRequestDispatcher("event.jsp").forward(req, resp);
            }
            
          }//end else
          
        }//end try
        catch(Exception e) {
          errorMessage = "Something went wrong in the NewEventServlet :(";
          //set new attributes to display
          req.setAttribute("errorMessage", errorMessage);
          
          //display the event
          req.getRequestDispatcher("login.jsp").forward(req, resp);
        }
        

	}//end doPost
	
	
	private String getStringFromParameter(String s) {
		if (s == null || s.equals("")) {
			return null;
		} else {
			return s;
		}
	}//end parse string args
	
	private int getIntFromParameter(String s) {
		if (s == null || s.equals("")) {
			return -1;
		} else {
			return Integer.parseInt(s);
		}
	}//end parse int args
	
}//end class


//end quarantine








package servlets;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


/*Quarantine for errors*/
@WebServlet("/userServlet")
public class UserServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
		throws ServletException, IOException {
		req.getRequestDispatcher("/_view/signUp.jsp").forward(req, resp);		//TODO update relative URL
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
		throws ServletException, IOException {
		
		// Decode form parameters and dispatch to controller
        String errorMessage = null;
        Boolean result = null;
        try {
        	if(req.getSession().getAttribute("username") != null){
      			String username = (String) req.getSession().getAttribute("username");
      			req.setAttribute("Username", username);
      		}
            else{
            	errorMessage = "Attempted to access your homepage without a logged in user.";
            	req.setAttribute("errorMessage", errorMessage);
            	req.getRequestDispatcher("/_view/login.jsp").forward(req, resp);		//TODO update relative URL
            }
        	
            
          
        }//end try
        catch(Exception e) {
        	errorMessage = "Something went worng in the UserServlet :(";
        	req.setAttribute("errorMessage", errorMessage);
        	req.getRequestDispatcher("/_view/login.jsp").forward(req, resp);	//TODO update relative URL
        }
        
        
        
	}//end doPost
	
	
	private String getStringFromParameter(String s) {
		if (s == null || s.equals("")) {
			return null;
		} else {
			return s;
		}
	}//end parse string args
	
}//end class


/*end quarantine*/






package servlets;

import java.io.IOException;
//import java.util.ArrayList;
//import java.util.List;

import controllers.LoginController;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;



/*Quarantine for errors*/
@WebServlet("/loginServlet")
public class LoginServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		req.getRequestDispatcher("login.jsp").forward(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
		throws ServletException, IOException {
		
		// Decode form parameters and dispatch to controller
        String errorMessage = null;
        
        try {
          String user = getStringFromParameter(req.getParameter("Username"));
          String pass = getStringFromParameter(req.getParameter("Password"));

          if (user == null || pass == null) {
            errorMessage = "Please fill in all fields.";
            req.setAttribute("errorMessage", errorMessage);
          }
          else { //fields filled
            LoginController controller = new LoginController();
            pass = controller.gimmeSalt(pass);
            pass = controller.hashBrowns(pass);
            
            if(controller.verifyAccount(user, pass)){
            	//resp.sendRedirect(req.getContextPath() + "/businessList.jsp");
            	req.getRequestDispatcher("businessList.jsp").forward(req, resp);	//TODO UserHome.jsp
            }//end good login
            else {//bad creds
            	errorMessage = "Invalid login.";
            	req.setAttribute("errorMessage", errorMessage);
            }//end bad creds else
            
          }//end fields filled else
          
        } catch(Exception e) {
          errorMessage = "There was a problem in the LoginServlet.";
          req.setAttribute("errorMessage", errorMessage);
        }
        
        //display
        req.getRequestDispatcher("login.jsp").forward(req, resp);
        
	}//end doPost
	
	
	private String getStringFromParameter(String s) {
		if (s == null || s.equals("")) {
			return null;
		} else {
			return s;
		}
	}//end parse string args
	
}//end class





package controllers;
import java.sql.SQLException;
import java.util.List;

import database.DatabaseConnector;
import model.Business;
import model.Event;
import database.Databasequeries;
//import persist.DerbyDatabase;


public class BusinessController {
	private Business business;
	DatabaseConnector db= new DatabaseConnector();
	Databasequeries queries = new Databasequeries();
	public void setBusiness(Business x){
		business = x;
	}
	
	public Business getBusiness(){
		return business;
	}
	public boolean insertBusiness(String name,String location){
		try{
			int id =(int) (Math.random()*10000);
			boolean exist=true;
			List<Business> events = null;
			int count=1;
			
			while(exist=true) {
				events = queries.findBusinessById(id);
				if (!events.isEmpty())
				{
					break;
				
				}
				else {
					id=((id^count)%10000);
					count++;
				}
			}
			queries.insertBusiness(name, location, id);
		}
		catch (Exception e){
			return false;
		}
		return true;
	}
	public Business findBusinessByName(String name){
		try{
			return queries.findBusinessByName(name).get(0);		}
		catch (Exception e){
			return null;
		}
		
	} 
	
	public String findBusinessByUser(String name){
		try{
			return queries.findRelationsByUser(name);
		}
		catch (Exception e){
			return null;
		}
		
	}
	
	public boolean removeBusiness(String name){
		try{
			queries.removeBusiness(name);
		}
		catch (Exception e){
			return false;
		}
		return true;
	}
	

}







package controllers;
import static org.junit.Assert.fail;

import java.net.URISyntaxException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import database.DatabaseConnector;
import database.Databasequeries;
//import persist.DerbyDatabase;
import model.User;

import java.sql.SQLException;
//import model.Account;
//import persist.DerbyDatabase;

import org.apache.commons.codec.binary.*;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;



public class LoginController {
	private User login;
	DatabaseConnector db= new DatabaseConnector();
	Databasequeries info = new Databasequeries();

	public void setAccount(User account) {
		login=account;
	}
	
	public User getAccount() {
		return login;
	}

	public List<User> findAccountByName(String name) throws SQLException{
		try{
			//TODO make this
			return info.findAccountByName(name);
		}
		catch (Exception e) {
			return null;
		}
		
	}
	
	public boolean verifyAccount(String name, String password) throws SQLException, URISyntaxException{
		String test = info.findAccountByName(name).get(0).getPassword();
		//String pass = hashBrowns(gimmeSalt(password));
		
		if(test.isEmpty()){
		//if(test == password){
			return false;
		}
		//System.out.println("<" + test + "> testing");
		//System.out.println("<" + test + "> testing");
			//System.out.println("<" + password + "> testing");
		if (test.equals(password)) {
			return true;
		}
		
		return false;
	}
	
	
	public boolean addNewAccount(String name, String password, String email, String business) throws SQLException, URISyntaxException{			
		int id =(int) (Math.random()*10000);
		boolean exist=true;
		List<User> users = null;
		int count=1;
/*				
		while(exist==true) {
			users = info.findAccountById(id);
			if (!users.isEmpty())
			{
				exist=false;
				break;
			
			}
			else {
				id=((id^count)%10000);
				count++;
			}
		}
*/
		//password =  hashBrowns(gimmeSalt(password));		//REDUNDANT, remove from final project
		users = info.findAccountByName(name);
		if (!users.isEmpty()){
			return false;
		}
		info.insertUser(name, password, email, id);

		return true;
	
		
	}
	public boolean removeAccount(String name){
		try{
			info.removeUser(name);
			return true;
		}
		catch(Exception e){
			return false;
		}
	}
	
	public String hashBrowns(String password) throws URISyntaxException {
		String salt = gimmeSalt(password);
		int iterations = 10000;
        int keyLength = 512;
        char[] passwordChars = password.toCharArray();
        byte[] saltBytes = salt.getBytes();

        byte[] hashedBytes;
        String hashedString = null;
		
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance( "PBKDF2WithHmacSHA512" );
            PBEKeySpec spec = new PBEKeySpec( password, salt, iterations, keyLength );
            SecretKey key = skf.generateSecret( spec );
            hashedBytes = key.getEncoded( );
            hashedString = Hex.encodeHexString(hashedBytes);
        } 
        catch ( NoSuchAlgorithmException | InvalidKeySpecException e ) {
            throw new RuntimeException( e );
        }
		
		return info.hashword(password);
	}
	
	public String gimmeSalt(String password) {
		String salty = "";
		String key = "sAltYwoRdS";
		
		for(int i=0; i<password.length(); i++){
			salty += password.charAt(i) + key.charAt(i%key.length());
		}
		
		return salty;
	}
		
}//end class
